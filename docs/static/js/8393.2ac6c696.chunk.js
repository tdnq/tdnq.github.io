"use strict";(globalThis.webpackChunktdnq_github_io=globalThis.webpackChunktdnq_github_io||[]).push([[8393,9637],{7885:(o,n,i)=>{i.d(n,{pn:()=>t,cn:()=>a,J9:()=>r});const t=[0,0,0,.1],a=[0,0,0,.1],r="#d8dadd"},9637:(o,n,i)=>{function t(o){var n;null===(n=o.querySelectorAll("canvas"))||void 0===n||n.forEach((o=>o.remove()))}i.d(n,{e:()=>t})},8393:(o,n,i)=>{i.r(n),i.d(n,{default:()=>e});var t=i(7885),a=i(8789),r=i(9637);function e(o){this.canvasContainer=o.current,(0,r.e)(this.canvasContainer),this.createCanvas(this.canvasContainer.clientWidth,this.canvasContainer.clientHeight).appendCanvas().getWebglContext(),this.gl.clearColor(...t.pn),this.gl.enable(this.gl.DEPTH_TEST),this.initShader(a.e3);const n=l.call(this);this.gl.clear(this.gl.DEPTH_BUFFER_BIT|this.gl.COLOR_BUFFER_BIT),this.gl.drawArrays(this.gl.POINTS,0,n)}function l(){const o=new Float32Array([0,0,0,0,.5,0,.5,0,0,-.5,0,0,0,-.5,0]),n=new Float32Array(this.getRandomArray(o.length/3*4));return this.fillShaderAttribution(o,"a_position",3),this.fillShaderAttribution(n,"a_color",4),o.length/3}},8789:(o,n,i)=>{i.d(n,{Le:()=>t,e3:()=>a,HJ:()=>r,t$:()=>e});const t={vshader:"\n            attribute vec4 a_position;\n            attribute vec4 a_color;\n            varying vec4 f_color;\n            uniform mat4 u_modelMatrix;\n            uniform vec4 u_eye;\n            uniform mat4 u_mvpMatrix; \n            varying float v_dist;\n            void main(){\n                gl_Position = u_mvpMatrix * a_position;\n                f_color = a_color;\n                v_dist = gl_Position.w;\n            }\n        ",fshader:"\n            precision mediump float;\n            varying vec4 f_color;\n            varying float v_dist;\n            uniform vec4 u_fogColor;\n            uniform vec2 u_fogDist;\n            void main(){\n                float fogFactor = clamp((u_fogDist.y - v_dist) / (u_fogDist.y - u_fogDist.x), 0.0, 1.0);\n                vec4 color = mix(u_fogColor, f_color, fogFactor);\n                gl_FragColor = color;\n            }\n        "},a={vshader:"\n            attribute vec4 a_position;\n            attribute vec4 a_color;\n            varying vec4 f_color;\n            void main(){\n                gl_Position = a_position;\n                f_color = a_color;\n                gl_PointSize = 100.0;\n            }\n        ",fshader:"\n            precision mediump float;\n            varying vec4 f_color;\n            void main(){\n                gl_FragColor = f_color;\n                float d = distance(gl_PointCoord, vec2(0.5, 0.5));\n                if(d < 0.5) {\n                        gl_FragColor = vec4(f_color); \n                     } else { discard; }\n                }\n        "},r={vshader:"\n            attribute vec4 a_position;\n            uniform mat4 u_mvpMatrix;\n            void main(){\n                gl_Position = u_mvpMatrix * a_position;\n            }\n        ",fshader:"\n            precision mediump float;\n            void main(){\n                gl_FragColor = vec4(gl_FragCoord.z, 0, 0, 0);\n            }\n        "},e={vshader:"\n        attribute vec4 a_position;\n        attribute vec4 a_color;\n        uniform mat4 u_mvpMatrix;\n        uniform mat4 u_mvpMatrixFromLight;\n        varying vec4 v_positionFromLight;\n        varying vec4 v_color;\n        void main(){\n            gl_Position = u_mvpMatrix * a_position;\n            v_positionFromLight = u_mvpMatrixFromLight * a_position;\n            v_color = a_color;\n        }\n    ",fshader:"\n        precision mediump float;\n        uniform sampler2D u_shadowMap;\n        varying vec4 v_positionFromLight;\n        varying vec4 v_color;\n        void main(){\n            vec3 shadowCoord = (v_positionFromLight.xyz / v_positionFromLight.w)/2.0 + 0.5;\n            vec4 rgbaDepth = texture2D(u_shadowMap, shadowCoord.xy);\n            float depth = rgbaDepth.r;\n            float visibility = (shadowCoord.z > depth + 0.005) ? 0.7: 1.0;\n            gl_FragColor = vec4(v_color.rgb * visibility, v_color.a);\n        }\n    "}}}]);