{"version":3,"sources":["../src lazy /^.*$/ groupOptions: {} namespace object","index.js","App.js","layouts/BasicLayout.js","config/router.js","serviceWorker.js","layouts/index.module.scss"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","all","slice","t","keys","Object","module","exports","ReactDOM","render","document","getElementById","serviceWorker","loadPage","path","Loadable","loader","loading","className","getRouteComponent","info","Page","component","layout","App","pagesConfig","item","index","exact","key","Header","Content","Footer","BasicLayout","style","color","this","props","children","textAlign","Date","getFullYear","React","Component","defaultProps","navKey","layoutsType","pagesRouterConfig","isLocalhost","Boolean","window","location","hostname","match","register","config","navigator","URL","process","href","origin","addEventListener","swUrl","fetch","headers","response","contentType","get","status","indexOf","ready","registration","unregister","reload","registerValidSW","catch","console","log","checkValidServiceWorker","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","error"],"mappings":"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","file":"static/js/main.d45297f7.chunk.js","sourcesContent":["var map = {\n\t\".\": [\n\t\t20,\n\t\t9\n\t],\n\t\"./\": [\n\t\t20,\n\t\t9\n\t],\n\t\"./App\": [\n\t\t25,\n\t\t9\n\t],\n\t\"./App.js\": [\n\t\t25,\n\t\t9\n\t],\n\t\"./App.test\": [\n\t\t101,\n\t\t9,\n\t\t2,\n\t\t5\n\t],\n\t\"./App.test.js\": [\n\t\t101,\n\t\t9,\n\t\t2,\n\t\t5\n\t],\n\t\"./componets/loading\": [\n\t\t39,\n\t\t9,\n\t\t0\n\t],\n\t\"./componets/loading/\": [\n\t\t39,\n\t\t9,\n\t\t0\n\t],\n\t\"./componets/loading/index\": [\n\t\t39,\n\t\t9,\n\t\t0\n\t],\n\t\"./componets/loading/index.js\": [\n\t\t39,\n\t\t9,\n\t\t0\n\t],\n\t\"./config/router\": [\n\t\t32,\n\t\t9\n\t],\n\t\"./config/router.js\": [\n\t\t32,\n\t\t9\n\t],\n\t\"./index\": [\n\t\t20,\n\t\t9\n\t],\n\t\"./index.css\": [\n\t\t65,\n\t\t7\n\t],\n\t\"./index.js\": [\n\t\t20,\n\t\t9\n\t],\n\t\"./layouts/BasicLayout\": [\n\t\t26,\n\t\t9\n\t],\n\t\"./layouts/BasicLayout.js\": [\n\t\t26,\n\t\t9\n\t],\n\t\"./layouts/index.module.scss\": [\n\t\t67,\n\t\t7\n\t],\n\t\"./pages/frontPage\": [\n\t\t40,\n\t\t9,\n\t\t1\n\t],\n\t\"./pages/frontPage/\": [\n\t\t40,\n\t\t9,\n\t\t1\n\t],\n\t\"./pages/frontPage/index\": [\n\t\t40,\n\t\t9,\n\t\t1\n\t],\n\t\"./pages/frontPage/index.js\": [\n\t\t40,\n\t\t9,\n\t\t1\n\t],\n\t\"./serviceWorker\": [\n\t\t33,\n\t\t9\n\t],\n\t\"./serviceWorker.js\": [\n\t\t33,\n\t\t9\n\t],\n\t\"./setupTests\": [\n\t\t102,\n\t\t9,\n\t\t3,\n\t\t6\n\t],\n\t\"./setupTests.js\": [\n\t\t102,\n\t\t9,\n\t\t3,\n\t\t6\n\t],\n\t\"./utils/router\": [\n\t\t97,\n\t\t9,\n\t\t4\n\t],\n\t\"./utils/router.js\": [\n\t\t97,\n\t\t9,\n\t\t4\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn Promise.all(ids.slice(2).map(__webpack_require__.e)).then(function() {\n\t\treturn __webpack_require__.t(id, ids[1])\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 157;\nmodule.exports = webpackAsyncContext;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport {pagesRouterConfig as pagesConfig} from \"./config/router\";\n// import { getRouteComponent } from \"./utils/router\";\n\n\n//router util\nimport { Spin } from 'antd';\nimport Loadable from 'react-loadable';\nimport BasicLayout from \"./layouts/BasicLayout\";\n\nconst loadPage = (path) => Loadable({\n    loader: () => import(`${path}`),\n    loading: () => {\n        return <div className=\"loading\">\n            <Spin />\n        </div>\n    }\n});\nfunction getRouteComponent(info = {}) {\n    let Page = loadPage(info.component);\n    if (info.layout) {\n        return function () {\n            return <BasicLayout>\n              <Page/>\n            </BasicLayout>\n        }\n    }\n    else {\n        return Page;\n    }\n}\n//router util\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        {\n          pagesConfig.map((item, index) => {\n            return <Route\n              path={item.path}\n              exact\n              component={\n                getRouteComponent(item)\n              }\n              key={item.component}\n            />\n          })\n        }\n        {/* <Route path=\"/\" exact component={loadPage(\"./pages/frontPage/index.js\")} /> */}\n      </Switch>\n    </Router >\n  )\n}\n\nexport default App;\n","import React from \"react\";\nimport { Layout } from 'antd';\nimport \"./index.module.scss\";\nconst { Header, Content, Footer } = Layout;\nexport default class BasicLayout extends React.Component {\n    render() {\n        return (\n            <Layout className=\"layout\">\n                <Header>\n                    <h1 style={{ color: \"white\" }}>\n                        TD's blog\n                    </h1>\n                </Header>\n                <Content>\n                    {this.props.children}\n                </Content>\n                <Footer style={{ textAlign: 'center' }}>Copyright&copy;{new Date().getFullYear()}.TD</Footer>\n            </Layout>\n        )\n    }\n\n}\nBasicLayout.defaultProps = {\n    navKey: 3\n}","export let layoutsType = [\"basicLayouts\"];\n\nexport let pagesRouterConfig = [\n   {\n      path: \"/\",\n      component: \"./pages/frontPage/index.js\",\n      layout: layoutsType[0]\n   }\n];","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"logo\":\"layouts_logo__1JSrc\"};"],"sourceRoot":""}